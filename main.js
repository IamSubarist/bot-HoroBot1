const VkBot = require('node-vk-bot-api');
const bot = new VkBot({
    token: '6188922a26b51a22c094c4bca66864277f5499d7cf366fdde7c3a6d5b76a51ceb95661fcf6a73c0a5f431'
});

const Markup = require('node-vk-bot-api/lib/markup');
const Session = require('node-vk-bot-api/lib/session');
const Scene = require('node-vk-bot-api/lib/scene');
const Stage = require('node-vk-bot-api/lib/stage');

const axios = require('axios')
const cheerio = require('cheerio')

const moment = require("moment");
moment.locale('ru');

const fs = require('fs')
const path = require('path')

bot.startPolling();
console.log('\nThe bot has been successfully launched and ready to work.\n')

// **********************SCENE**********************

const daily = require('./daily.js')
const tomorrow = require('./tomorrow.js')
// const weekly = require('./weekly.js')
// const monthly = require('./monthly.js')
// const yearly = require('./yearly.js')
// const characteristic = require('./characteristic.js')
// const otherHoroscope = require('./otherHoroscope.js')

const session = new Session();
const stage = new Stage(daily, tomorrow, weekly);

bot.use(session.middleware());
bot.use(stage.middleware());

// **********************CODE**********************

const filePath = path.join(__dirname, 'users.txt')
bot.command('ะฝะฐัะฐัั', ctx => {
    ctx.reply('ะัะธะฒะตั! ะฏ - ะะพัะพะะพั, ั ะผะพะณั ัะฐััะบะฐะทะฐัั ัะตะฑะต ะณะพัะพัะบะพะฟ ัะฒะพะตะณะพ ะทะฝะฐะบะฐ ะทะพะดะธะฐะบะฐ.๐ฎ\nะงัะพะฑั ะฝะฐัะฐัั ัะฐะฑะพัั ัะพ ะผะฝะพะน ะพัะฟัะฐะฒั ะผะฝะต "ะะพัะพัะบะพะฟ". ะัะปะธ ะดัะผะฐะตัั, ััะพ ะฑัะบะฒั ะฟะปะฐัะฝัะต, ะผะพะถะตัั ะฝะฐะถะฐัั ะฝะฐ ะบะฝะพะฟะบั ะฝะธะถะต๐\n\nะะพะฒัะพัััั. ะ ะดะฐะปัะฝะตะนัะตะผ, ะตัะปะธ ัะพะฑะธัะฐะตัััั ะธัะฟะพะปัะทะพะฒะฐัั ะผะตะฝั ะฟัะพััะพ ะฟะธัะธ ะผะฝะต "ะะพัะพัะบะพะฟ" ะธะปะธ ะผะพะถะตัั ะพัะฟัะฐะฒั ะปัะฑะพะน ัะธะผะฒะพะป, ัะพะณะดะฐ ั ะฟัะธัะปั ัะตะฑะต ะบะปะฐะฒะธะฐัััั๐', null, Markup.keyboard([
            [Markup.button('ะะพัะพัะบะพะฟ๐ฎ')],
            [Markup.button('ะฅะฐัะฐะบัะตัะธััะธะบะฐ๐ฎ')],
        ]).inline()
        )
    fs.appendFile(filePath, `https://vk.com/foaf.php?id=${ctx.message.peer_id}\n`, (err) =>{
        if (err) {
            throw err
        }
        // console.log('Update in file.');
    })
});

bot.command('ะฝะฐ ัะตะณะพะดะฝั', (ctx) => {
    ctx.scene.enter('daily')
})

bot.command('ะฝะฐ ะทะฐะฒััะฐ', (ctx) => {
    ctx.scene.enter('tomorrow')
})

bot.command('ะฝะฐ ะฝะตะดะตะปั', (ctx) => {
    ctx.scene.enter('weekly')
})

// bot.command('ะฝะฐ ะผะตััั', (ctx) => {
//     ctx.scene.enter('monthly')
// })

// bot.command('ะฝะฐ ะณะพะด', (ctx) => {
//     ctx.scene.enter('yearly')
// })

// bot.command(/ะฟะพะดัะพะฑะฝัะน ะฝะฐ ัะตะณะพะดะฝั/i, (ctx) => {
//     ctx.scene.enter('otherHoroscope')
// })

// bot.command(/ัะฐัะฐะบัะตัะธััะธะบะฐ/i, (ctx) => {
//     ctx.scene.enter('characteristic')
// })

bot.command(/ะณะพัะพัะบะพะฟ/i, (ctx) => {
    ctx.reply('ะะฐะบะพะน ะณะพัะพัะบะพะฟ ะฒั ัะพัะธัะต ัะทะฝะฐัั?๐ฎ', null, Markup.keyboard([
        [Markup.button('ะะฐ ัะตะณะพะดะฝั', 'primary')],
        // [Markup.button('ะะพะดัะพะฑะฝัะน ะฝะฐ ัะตะณะพะดะฝั', 'default')],
        [Markup.button('ะะฐ ะทะฐะฒััะฐ', 'default'), Markup.button('ะะฐ ะฝะตะดะตะปั', 'default')]
      ])
      )
})

bot.command('', (ctx) => {
    ctx.reply('ะ! ะฅะพัะตัั ัะทะฝะฐัั ััะพ ะฟัะพ ัะตะฑั ะณะพะฒะพััั ะทะฒัะทะดั?? ะะผะธ ะฝะฐ ะบะฝะพะฟะบั ะฝะธะถะต๐', null, Markup.keyboard([
        [ Markup.button('ะะพัะพัะบะพะฟ๐ฎ', 'primary')]
    ])
    )
})